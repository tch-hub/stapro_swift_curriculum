{
    "sections": [
        {
            "id": "0",
            "title": "デフォルトのコード解説",
            "description": "新しいSwiftUIプロジェクトで自動生成されるコードについて学びます。",
            "codeBlocks": [
                {
                    "title": "自動生成される基本構造",
                    "intro": "新しいSwiftUIプロジェクトを作ると、このコードが自動で作られます。これがSwiftUIアプリの基本の形です。",
                    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/0_1.png",
                    "scale": 1,
                    "description": "```swift\nimport SwiftUI\n```\nSwiftUIをよみこむことで、TextやButtonなどの便利な機能を使えるようになります。\n\n```swift\nstruct ContentView: View {\n    var body: some View {\n    }\n}\n```\nContentViewという構造体を作ります。これはアプリの画面のメイン部分です。Viewというルールに従って作ります。bodyという部分は、画面に何を表示するかを書くところです。some Viewは、戻り値の型を指定する特別な書き方です。これでSwiftUIがうまく動きます。\n\n```swift\n#Preview {\n    ContentView()\n}\n```\n\n#Previewは、コードを書くたびに画面をすぐに見られる機能です。これで、アプリの見た目をすぐに確認できます。"
                }
            ]
        },
        {
            "id": "1",
            "title": "テキスト表示",
            "description": "SwiftUIでテキストを表示する方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Textビューの基本",
                    "intro": "TextビューはSwiftUIで最も基本的なビューコンポーネントです。画面にテキストを表示するために使用します。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\") // Hello, World!を表示するテキスト\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/1_1.png",
                    "scale": 1,
                    "description": "```swift\nText(\"Hello, World!\")\n```\nText(\"Hello, World!\") はTextビューを作成しています。Textビューは文字列を引数に取って、その文字列を画面に表示します。この例では\"Hello, World!\"という文字列が表示されます。\nTextビューはSwiftUIの基礎となるビューで、他のビューと組み合わせて複雑なUIを作成する土台となります。シンプルですが、フォント、色、サイズなどの装飾を追加することで様々な表現が可能になります。"
                },
                {
                    "title": "テキストの装飾",
                    "intro": "Textビューは様々な装飾をチェーンして適用することができます。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Text(\"SwiftUIの装飾\") // 基本のテキストを作成\n            .font(.largeTitle) // 大きなタイトル用のフォントサイズ\n            .foregroundColor(.blue) // 青色に設定\n            .fontWeight(.bold) // 太字に設定\n            .multilineTextAlignment(.center) // 複数行の場合中央揃え\n            .padding() // 周囲に余白を追加\n    }\n}\n\n#Preview {\n    ContentView() // プレビューを表示\n}",
                    "previewImage": "/images/tutorial/1_2.png",
                    "scale": 1,
                    "description": "この例では、基本的なTextビューに複数の装飾を順番に適用しています。\n\n```swift\nText(\"SwiftUIの装飾\")\n```\nまず、基本のテキストを作成します。この時点では、まだ何の装飾も適用されていません。\n\n```swift\nText(\"SwiftUIの装飾\")\n    .font(.largeTitle) //大きなタイトル用のフォントサイズ\n    .foregroundColor(.blue) //青色に設定\n    .fontWeight(.bold) //太字に設定\n```\n次に、フォントと色を設定します。\n\n```swift\nText(\"SwiftUIの装飾\")\n    .font(.largeTitle)\n    .foregroundColor(.blue)\n    .fontWeight(.bold)\n    .multilineTextAlignment(.center) //複数行の場合中央揃え\n    .padding() // 周囲に余白を追加\n```\n最後に、配置と余白を追加します。\n\npadding()は引数なしで呼び出すと、SwiftUIのデフォルトの余白（通常16ポイント）が適用されます。数値を指定することでカスタムな余白を設定することも可能です。例えば、padding(20) とすると上下左右に20ポイントの余白が適用されます。また、padding(.horizontal) のように特定の方向だけに余白を適用することもできます。\n\nこれらの修飾子は、ドット(.)でつなげて順番に適用することができます。SwiftUIではこのようなチェーン構文が一般的で、コードを読みやすく整理できます。\n\nこのコードに書かれていない他の装飾パターンとしては、以下のようなものがあります：\n\n```swift\n.background(Color.yellow)     // テキストの背景色を設定\n.underline()                  // テキストに下線を引く\n.strikethrough()              // テキストに取り消し線を引く\n.italic()                     // テキストを斜体にする\n.baselineOffset(5)            // テキストのベースラインをずらす\n.kerning(2)                   // 文字間のスペースを調整\n.lineSpacing(5)               // 行間のスペースを調整\n.minimumScaleFactor(0.5)      // テキストが収まらない場合の最小縮小率\n.lineLimit(2)                 // 表示する最大行数を制限\n.textCase(.uppercase)         // テキストを大文字に変換\n```\n\nこれらの装飾を組み合わせることで、プロフェッショナルで魅力的なテキスト表示を作成できます。装飾の順番によって結果が異なる場合があるので、注意が必要です。"
                },
                {
                    "title": "複数行のテキスト",
                    "intro": "Textビューは長いテキストを扱う場合、自動的に折り返して複数行で表示します。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Text(\"これは長いテキストです。SwiftUIでは自動的に折り返されて複数行で表示されます。\\n\\n改行を\\n明示的に\\n入れることも\\nできます\")\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/1_3.png",
                    "scale": 0.9,
                    "description": "また、\\nを使って明示的に改行を入れることもできます。\n\n```swift\nText(\"これは長いテキストです。SwiftUIでは自動的に折り返されて複数行で表示されます。\\n\\n改行を\\n明示的に\\n入れることも\\nできます\")\n```\nText()の中に長い文字列を渡しています。この文字列には通常の文章と\\n（改行コード）が含まれています。SwiftUIは画面の幅に合わせて自動的にテキストを折り返しますが、\\nがある場所では必ず改行されます。\nこのように、Textビューは単純な文字列表示だけでなく、長い文章や改行を含む複雑なテキスト表示にも対応しています。ブログ記事や説明文を表示する際に便利です。"
                }
            ]
        },
        {
            "id": "2",
            "title": "ボタン操作",
            "description": "SwiftUIでボタンを作成し、操作を扱う方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Buttonの基本",
                    "intro": "ButtonはSwiftUIで最も基本的なインタラクティブなビューです。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Button(\"押してみよう\") {\n            print(\"ボタンが押されました！\")\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/2_1.png",
                    "description": "最もシンプルな形では、Button(\"ラベル\") { action } という構文で作成できます。\n\n```swift\nButton(\"押してみよう\") {\n    print(\"ボタンが押されました！\")\n}\n```\n\n最初の引数にはボタンに表示する文字列（ラベル）を渡します。この例では\"押してみよう\"という文字列がボタンのラベルになります。\n\n2番目の引数にはactionクロージャーを渡します。これはボタンがタップされたときに実行されるコードです。クロージャーは { } で囲まれた無名関数のようなもので、この例では print(\"ボタンが押されました！\") が実行されます。\n\nprint()関数はコンソールにメッセージを出力するデバッグ用の関数です。実際のアプリでは、ここに何らかの処理（データの保存、画面遷移、状態の変更など）を書くことになります。\n\nボタンをタップすると、action内のコードが一度だけ実行されます。ボタンは自動的にタップ可能な外観を持ち、ユーザーが押したことを視覚的にフィードバックします。"
                },
                {
                    "title": "ボタンのスタイル",
                    "intro": "Buttonには様々なスタイルがあります。Textビューを使って装飾することで、ボタンの見た目をカスタマイズできます。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Button(action: {\n            print(\"スタイル付き\")\n        }) {\n            Text(\"スタイル付きボタン\")\n                .padding() // 内側に余白を追加\n                .background(Color.green) // 背景色を緑に設定\n                .foregroundColor(.white) // 文字色を白に設定\n                .cornerRadius(15) // 角を丸くする\n                .shadow(radius: 5) // 影を付けて立体感を出す\n        }\n    }\n}",
                    "previewImage": "/images/tutorial/2_2.png",
                    "description": "Textビューを使って装飾することで、ボタンの見た目をカスタマイズできます。\n\n```swift\nButton(action: {\n    print(\"スタイル付き\")\n}) {\n    Text(\"スタイル付きボタン\")\n        .padding() // 内側に余白を追加\n        .background(Color.green) // 背景色を緑に設定\n        .foregroundColor(.white) // 文字色を白に設定\n        .cornerRadius(15) // 角を丸くする\n        .shadow(radius: 5) // 影を付けて立体感を出す\n}\n```\n\n- padding() : ボタンの内側に余白を追加し、テキストとボタンの境界の間にスペースを作ります。これによりボタンが押しやすくなります。\n\n- background(Color.green) : ボタンの背景色を緑色に設定します。Color.greenはSwiftUIで用意されている標準色です。\n\n- foregroundColor(.white) : テキストの色を白色に設定します。これにより緑色の背景に白い文字が映えます。\n\n- cornerRadius(15) : ボタンの角を15ポイントの半径で丸くします。数値が大きいほど角が丸くなります。\n\n- shadow(radius: 5) : ボタンに5ポイントの半径の影を付けて、立体感を出します。影の半径が大きいほど影が柔らかくなります。\n\nこれらの修飾子を組み合わせることで、プロフェッショナルな見た目のボタンを作成できます。"
                }
            ]
        },
        {
            "id": "3",
            "title": "レイアウト",
            "description": "ビューをどのように配置するかを学びます。",
            "codeBlocks": [
                {
                    "title": "VStack - 縦方向のレイアウト",
                    "intro": "VStackはSwiftUIでビューを縦方向に並べて配置するためのコンテナです。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"上\")\n                .font(.title)\n                .foregroundColor(.red)\n            \n            Text(\"中央\")\n                .font(.title)\n                .foregroundColor(.green)\n            \n            Text(\"下\")\n                .font(.title)\n                .foregroundColor(.blue)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/3_1.png",
                    "description": "複数のビューを上から下へ順番に積み重ねるレイアウトを作成できます。\n\n```swift\nVStack(spacing: 20) {\n    Text(\"上\")\n        .font(.title)\n        .foregroundColor(.red)\n    \n    Text(\"中央\")\n        .font(.title)\n        .foregroundColor(.green)\n    \n    Text(\"下\")\n        .font(.title)\n        .foregroundColor(.blue)\n}\n```\n\n.font(.title)はSwiftUIで用意されている標準フォントサイズの一つで、タイトルに適した大きさのフォントを適用します。bodyやheadlineなどの他の標準サイズも利用可能です。\n\nVStackの基本的な使い方は、VStack { } のように波括弧の中に並べたいビューを記述します。この例では、赤い「上」、緑の「中央」、青い「下」という3つのTextビューを縦に並べています。\n\nspacingパラメータは、ビュー同士の間隔を指定します。この例ではspacing: 20と指定しているので、各Textビューの間に20ポイントのスペースが挿入されます。spacingを指定しない場合は、デフォルトの間隔が適用されます。\n\nビューはVStack内に記述した順番で上から下へ配置されます。最初のビューが一番上になり、最後のビューが一番下になります。\n\nVStackは画面のレイアウトを整理するのに非常に便利です。例えば、タイトル、コンテンツ、ボタンなどを縦に並べて配置するようなUIを作成する際に使用します。padding()をVStackに適用することで、全体に余白を追加できます。"
                },
                {
                    "title": "HStack - 横方向のレイアウト",
                    "intro": "HStackはSwiftUIでビューを横方向に並べて配置するためのコンテナです。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        HStack(spacing: 15) {\n            Text(\"左\")\n                .font(.title)\n                .foregroundColor(.red)\n            \n            Text(\"中央\")\n                .font(.title)\n                .foregroundColor(.green)\n            \n            Text(\"右\")\n                .font(.title)\n                .foregroundColor(.blue)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/3_2.png",
                    "description": "複数のビューを左から右へ順番に並べて配置するレイアウトを作成できます。\n\n```swift\nHStack(spacing: 15) {\n    Text(\"左\")\n        .font(.title)\n        .foregroundColor(.red)\n    \n    Text(\"中央\")\n        .font(.title)\n        .foregroundColor(.green)\n    \n    Text(\"右\")\n        .font(.title)\n        .foregroundColor(.blue)\n}\n```\n\nHStackの基本的な使い方は、HStack { } のように波括弧の中に並べたいビューを記述します。この例では、赤い「左」、緑の「中央」、青い「右」という3つのTextビューを横に並べています。\n\nspacingパラメータは、ビュー同士の間隔を指定します。この例ではspacing: 15と指定しているので、各Textビューの間に15ポイントのスペースが挿入されます。spacingを指定しない場合は、デフォルトの間隔が適用されます。\n\nビューはHStack内に記述した順番で左から右へ配置されます。最初のビューが一番左になり、最後のビューが一番右になります。\n\nHStackは画面のレイアウトを整理するのに非常に便利です。例えば、アイコンとテキストを横に並べたり、複数のボタンを横に配置したりするようなUIを作成する際に使用します。padding()をHStackに適用することで、全体に余白を追加できます。"
                },
                {
                    "title": "ZStack - 重ね合わせレイアウト",
                    "intro": "ZStackはSwiftUIでビューを奥行き方向に重ねて配置するためのコンテナです。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        ZStack {\n            Color.blue.opacity(0.3)\n                .frame(width: 200, height: 200)\n            \n            Color.red.opacity(0.5)\n                .frame(width: 150, height: 150)\n            \n            Text(\"重ねる\")\n                .foregroundColor(.white)\n                .font(.largeTitle)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/3_3.png",
                    "description": "複数のビューを同じ位置に重ねて配置するレイアウトを作成できます。\n\n```swift\nZStack {\n    Color.blue.opacity(0.3)\n        .frame(width: 200, height: 200)\n    \n    Color.red.opacity(0.5)\n        .frame(width: 150, height: 150)\n    \n    Text(\"重ねる\")\n        .foregroundColor(.white)\n        .font(.largeTitle)\n}\n```\n\nZStackの基本的な使い方は、ZStack { } のように波括弧の中に重ねたいビューを記述します。この例では、青い背景、赤い背景、白いテキストの順に重ねています。\n\nビューはZStack内に記述した順番で奥から手前に重ねられます。最初のビューが一番奥になり、最後のビューが一番手前に表示されます。この例では、青いColorが一番奥、赤いColorが中央、白いTextが一番手前になります。\n\nopacity()はビューの透明度を指定します。0.0が完全に透明、1.0が完全に不透明です。この例では青を0.3（30%透明）、赤を0.5（50%透明）に設定しています。\n\nframe()はビューのサイズを指定します。widthとheightで幅と高さをポイント単位で設定できます。\n\nZStackは背景の上に他の要素を重ねるのに適しています。例えば、背景画像の上にテキストを配置したり、バッジのような重ね合わせUIを作成したりする際に使用します。奥行きのあるレイアウトを作成することで、よりリッチな視覚効果を実現できます。"
                },
                {
                    "title": "Spacing - 要素間の間隔",
                    "intro": "spacingパラメータはVStackやHStack内でビュー同士の間隔を指定するための重要な設定です。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"間隔なし\")\n                .font(.headline)\n            \n            VStack(spacing: 0) {\n                Text(\"間隔0\")\n                Text(\"ぎゅっと\")\n                Text(\"くっつく\")\n            }\n            .background(Color.yellow.opacity(0.3))\n            \n            VStack(spacing: 10) {\n                Text(\"間隔10\")\n                Text(\"少し\")\n                Text(\"離れる\")\n            }\n            .background(Color.green.opacity(0.3))\n            \n            VStack(spacing: 30) {\n                Text(\"間隔30\")\n                Text(\"かなり\")\n                Text(\"離れる\")\n            }\n            .background(Color.blue.opacity(0.3))\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/3_4.png",
                    "description": "適切な間隔を設定することで、読みやすく使いやすいレイアウトを作成できます。\n\n```swift\nVStack(spacing: 20) {\n    Text(\"間隔なし\")\n        .font(.headline)\n    \n    VStack(spacing: 0) {\n        Text(\"間隔0\")\n        Text(\"ぎゅっと\")\n        Text(\"くっつく\")\n    }\n    .background(Color.yellow.opacity(0.3))\n    \n    VStack(spacing: 10) {\n        Text(\"間隔10\")\n        Text(\"少し\")\n        Text(\"離れる\")\n    }\n    .background(Color.green.opacity(0.3))\n    \n    VStack(spacing: 30) {\n        Text(\"間隔30\")\n        Text(\"かなり\")\n        Text(\"離れる\")\n    }\n    .background(Color.blue.opacity(0.3))\n}\n```\n\nspacingパラメータはVStack(spacing: 値) または HStack(spacing: 値) のように指定します。値はポイント単位で、0以上の数値を設定できます。\n\nこの例では、異なるspacing値を持つ3つのVStackを比較しています：\n\n- spacing: 0 : ビュー同士が完全に密着します。ぎゅっとくっついたレイアウトになります。\n\n- spacing: 10 : ビュー同士が少し離れます。適度な間隔で読みやすくなります。\n\n- spacing: 30 : ビュー同士がかなり離れます。ゆったりとしたレイアウトになります。\n\nbackground()は各VStackに半透明の背景色を付けて、間隔の違いを視覚的にわかりやすくしています。opacity(0.3)で30%の透明度を設定しています。\n\nspacingの値はアプリのデザインやコンテンツの種類によって調整します。ボタン同士の場合は少し間隔を空け、関連するテキスト同士の場合は密着させるなど、状況に応じて使い分けます。適切なspacingはUIの使いやすさと美しさを大きく向上させます。"
                }
            ]
        },
        {
            "id": "4",
            "title": "状態管理",
            "description": "ビューの状態を管理してインタラクティブなUIを作成します。",
            "codeBlocks": [
                {
                    "title": "@Stateを使った状態管理",
                    "intro": "@StateはSwiftUIでビューの状態を管理するための特別なプロパティラッパーです。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    @State private var count = 0 // カウントを保存する状態変数\n    \n    var body: some View {\n        VStack { // 縦方向にビューを並べる\n            Text(\"カウント: \\(count)\") // 現在のカウントを表示\n                .font(.largeTitle) // 大きなフォントサイズ\n            \n            HStack { // 横方向にボタンを並べる\n                Button(action: {\n                    count -= 1 // カウントを1減らす\n                }) {\n                    Text(\"-\") // マイナスボタンのラベル\n                        .font(.title) // タイトルサイズのフォント\n                        .frame(width: 50, height: 50) // ボタンのサイズ\n                        .background(Color.red) // 赤い背景\n                        .foregroundColor(.white) // 白い文字\n                        .cornerRadius(25) // 角を丸くする\n                }\n                \n                Button(action: {\n                    count += 1 // カウントを1増やす\n                }) {\n                    Text(\"+\") // プラスボタンのラベル\n                        .font(.title) // タイトルサイズのフォント\n                        .frame(width: 50, height: 50) // ボタンのサイズ\n                        .background(Color.green) // 緑の背景\n                        .foregroundColor(.white) // 白い文字\n                        .cornerRadius(25) // 角を丸くする\n                }\n            }\n        }\n    }\n}\n\n#Preview {\n    ContentView() // プレビューを表示\n}",
                    "previewImage": "/images/tutorial/4_1.png",
                    "description": "インタラクティブなUIを作成する際に欠かせない重要な概念です。\n\n```swift\n@State private var count = 0 // カウントを保存する状態変数\n```\n\n通常の変数とは異なり、@Stateがついた変数の値が変更されると、その変数を使っているビューが自動的に再描画されます。これにより、ユーザーの操作に応じてUIがリアルタイムに更新されます。\n\n## @Stateの仕組み\n\nSwiftUIでは、UIはデータ（状態）の反映として描画されます。ユーザーがボタンをタップしたり、テキストを入力したりすると、状態が変化し、それに応じてUIが更新される必要があります。\n\n@Stateは、この状態変化をSwiftUIに通知するための仕組みです。@Stateがついた変数の値が変わると、SwiftUIは自動的にその変数を使っているビューを再描画します。これを「リアクティブ（反応的）プログラミング」と呼びます。\n\n## なぜ@Stateが必要なのか\n\nSwiftUIのビューはstruct（構造体）でできており、通常の変数は変更できません。しかし、インタラクティブなUIでは状態を変更する必要があります。@Stateはこの問題を解決します。\n\n```swift\nstruct ContentView: View {\n    // ❌ 通常の変数は変更できない\n    // var count = 0  // エラーになる\n    \n    // ✅ @Stateなら変更可能\n    @State private var count = 0\n    \n    var body: some View {\n        VStack {\n            Text(\"カウント: \\(count)\")\n            Button(\"カウントアップ\") {\n                count += 1  // ここで状態が変更され、UIが自動更新される\n            }\n        }\n    }\n}\n```\n\n## @Stateのルール\n\n1. **private varとして宣言する**\n   - @State変数は必ずprivate varとして宣言します\n   - これにより、変数がそのビュー内でのみ変更可能になり、外部からの意図しない変更を防ぎます\n\n2. **初期値を設定する**\n   - @State変数には必ず初期値を設定します\n   - ビューが初めて表示される時の状態を定義します\n\n3. **$記号でバインディング**\n   - TextFieldやToggleなどのコントロールにバインドする場合は、変数名の前に$記号を付けます\n   - $countのように書くと、コントロールの値と@State変数が同期されます\n\n```swift\n@State private var name = \"\"\n@State private var isOn = false\n@State private var volume = 0.5\n\nvar body: some View {\n    VStack {\n        // TextFieldでは$nameのように$記号を使う\n        TextField(\"名前を入力\", text: $name)\n        \n        // Toggleでも$isOnのように$記号を使う\n        Toggle(\"オン/オフ\", isOn: $isOn)\n        \n        // Sliderでも$volumeのように$記号を使う\n        Slider(value: $volume, in: 0...1)\n    }\n}\n```\n\n## @Stateの使用例\n\nこのカウンターアプリの例では、countという@State変数を使ってカウンターの値を管理しています。\n\n- +ボタンをタップするとcount += 1が実行されます\n- -ボタンをタップするとcount -= 1が実行されます\n- countの値が変わるたびに、Text(\"カウント: \\(count)\")が自動的に更新されて新しい値が表示されます\n\n```swift\nButton(action: {\n    count += 1  // countの値が変わると、UIが自動的に更新される\n}) {\n    Text(\"+\")\n}\n```\n\n## @State vs 通常の変数\n\n| 通常の変数 | @State変数 |\n|------------|-------------|\n| 値の変更がUIに反映されない | 値の変更がUIに自動反映される |\n| struct内で変更可能 | @Stateで変更可能 |\n| メモリ管理がシンプル | SwiftUIが自動管理 |\n\n## @Stateの注意点\n\n- @State変数はビューが再作成されると初期値に戻ります\n- 複雑な状態管理が必要な場合は@StateObjectやEnvironmentObjectを使います\n- @Stateはローカルな状態管理に適しています\n\n@StateはSwiftUIのリアクティブプログラミングの基礎となるもので、これを使うことで複雑な状態管理をシンプルに実装できます。カウンターアプリのようなシンプルなものから、複雑なフォームまで、様々なインタラクティブなUIの基礎となります。"
                }
            ]
        },
        {
            "id": "5",
            "title": "図形",
            "description": "SwiftUIで図形を描画する方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Circle - 円",
                    "intro": "Circle()で円を描画できます。fill()で塗りつぶし、stroke()で枠線を指定できます。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        VStack(spacing: 30) {\n            // 青い塗りつぶしの円\n            Circle()\n                .fill(Color.blue)\n                .frame(width: 100, height: 100)\n            \n            // 赤い枠線の円\n            Circle()\n                .stroke(Color.red, lineWidth: 5)\n                .frame(width: 80, height: 80)\n            \n            // 緑の塗りつぶしに白い枠線の円\n            Circle()\n                .fill(Color.green)\n                .overlay(\n                    Circle()\n                        .stroke(Color.white, lineWidth: 4)\n                )\n                .frame(width: 120, height: 120)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/5_1.png",
                    "scale": 0.8,
                    "description": "overlay()を使って枠線付きの円を作成することも可能です。\n\n**青い塗りつぶしの円**\n```swift\nCircle()\n    .fill(Color.blue)\n    .frame(width: 100, height: 100)\n```\n\n**赤い枠線の円**\n```swift\nCircle()\n    .stroke(Color.red, lineWidth: 5)\n    .frame(width: 80, height: 80)\n```\n\n**緑の塗りつぶしに白い枠線の円**\n```swift\nCircle()\n    .fill(Color.green)\n    .overlay(\n        Circle()\n            .stroke(Color.white, lineWidth: 4)\n    )\n    .frame(width: 120, height: 120)\n```"
                },
                {
                    "title": "Rectangle - 四角形",
                    "intro": "Rectangle()で四角形を描画できます。cornerRadius()で角の丸みを調整できます。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            // 角丸なしの四角形\n            Rectangle()\n                .fill(Color.orange)\n                .frame(width: 150, height: 80)\n            \n            // 少し角丸の四角形\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 150, height: 80)\n                .cornerRadius(10)\n            \n            // かなり角丸の四角形\n            Rectangle()\n                .fill(Color.green)\n                .frame(width: 150, height: 80)\n                .cornerRadius(25)\n            \n            // RoundedRectangleで角丸四角形\n            RoundedRectangle(cornerRadius: 20)\n                .fill(Color.pink)\n                .frame(width: 150, height: 80)\n            \n            // Capsule（完全な角丸）\n            RoundedRectangle(cornerRadius: 40)\n                .fill(Color.purple)\n                .frame(width: 150, height: 80)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/5_2.png",
                    "scale": 0.7,
                    "description": "RoundedRectangle()で最初から角丸の四角形を作成できます。Capsuleのような完全な角丸を作ることも可能です。\n\n**角丸なしの四角形**\n```swift\nRectangle()\n    .fill(Color.orange)\n    .frame(width: 150, height: 80)\n```\n\n**少し角丸の四角形**\n```swift\nRectangle()\n    .fill(Color.blue)\n    .frame(width: 150, height: 80)\n    .cornerRadius(10)\n```\n\n**RoundedRectangleで角丸四角形**\n```swift\nRoundedRectangle(cornerRadius: 20)\n    .fill(Color.pink)\n    .frame(width: 150, height: 80)\n```\n\n**Capsule（完全な角丸）**\n```swift\nRoundedRectangle(cornerRadius: 40)\n    .fill(Color.purple)\n    .frame(width: 150, height: 80)\n```"
                }
            ]
        },
        {
            "id": "6",
            "title": "入力",
            "description": "ユーザーからの入力を扱う方法を学びます。",
            "codeBlocks": [
                {
                    "title": "TextField - テキスト入力",
                    "intro": "TextFieldでテキスト入力を扱えます。$記号を使って@State変数とバインディングします。",
                    "code": "import SwiftUI\n\n// メインのビュー構造体\nstruct ContentView: View {\n    // ユーザーの名前を保存する状態変数\n    // @Stateをつけると値が変わった時に画面が自動更新される\n    @State private var name = \"\"\n    \n    // 画面に表示する内容を定義するプロパティ\n    var body: some View {\n        // 縦方向にビューを並べるコンテナ\n        VStack(spacing: 20) {\n            // 名前を入力するテキストフィールド\n            // $nameで状態変数とつなげる（バインディング）\n            TextField(\"名前を入力してください\", text: $name)\n                .textFieldStyle(RoundedBorderTextFieldStyle()) // 角丸の枠線スタイル\n                .padding(.horizontal) // 左右に余白を追加\n            \n            // 条件分岐：名前が入力されている場合のみ挨拶を表示\n            // !name.isEmpty は「nameが空でない」という意味\n            if !name.isEmpty {\n                // 挨拶メッセージを表示\n                Text(\"こんにちは、\\(name)さん！\")\n                    .font(.title) // 大きなフォントサイズ\n                    .foregroundColor(.blue) // 青色で表示\n            }\n        }\n        .padding() // 全体に余白を追加\n    }\n}\n\n// プレビューでアプリの見た目を確認\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/6_1.png",
                    "description": "TextFieldはSwiftUIでテキスト入力を扱うためのビューです。ユーザーがキーボードから文字を入力できるようにします。\n\n## TextFieldの基本構文\n\n```swift\nTextField(\"プレースホルダーテキスト\", text: $stateVariable)\n```\n\n- **第1引数**: プレースホルダー（入力フィールドが空の場合に表示される薄い文字）\n- **textパラメータ**: @State変数とのバインディング（$記号必須）\n\n## @Stateとのバインディング\n\n```swift\n@State private var name = \"\"\n\nTextField(\"名前を入力してください\", text: $name)\n```\n\n$記号（ドルマーク）は「バインディング」を意味します。これにより、TextFieldに入力されたテキストが自動的に@State変数に反映され、逆に@State変数の値が変更されるとTextFieldの内容も更新されます。\n\n## 条件分岐による動的UI\n\n@State変数の値に応じて、UIの表示・非表示を切り替えることができます：\n\n```swift\nif !name.isEmpty {\n    Text(\"こんにちは、\\(name)さん！\")\n        .font(.title)\n        .foregroundColor(.blue)\n}\n```\n\n- `!name.isEmpty`: nameが空でない場合（!は否定演算子）\n- `isEmpty`: 文字列が空かどうかをチェックするプロパティ\n- この条件がtrueの場合のみ、中括弧内のTextビューが表示されます\n\nこれにより、ユーザーが名前を入力したときのみ挨拶を表示するというインタラクティブなUIを実現できます。\n\n## スタイルのカスタマイズ\n\nTextFieldの外観はtextFieldStyle()で変更できます：\n\n```swift\n// デフォルトスタイル（プラットフォームによる）\nTextField(\"入力してください\", text: $text)\n\n// 角丸の枠線スタイル\nTextField(\"入力してください\", text: $text)\n    .textFieldStyle(RoundedBorderTextFieldStyle())\n\n// プレーンスタイル（枠線なし）\nTextField(\"入力してください\", text: $text)\n    .textFieldStyle(PlainTextFieldStyle())\n```\n\n## キーボードタイプの設定\n\nキーボードの種類を指定することで、入力しやすくなります：\n\n```swift\n// メールアドレス入力用\nTextField(\"メールアドレス\", text: $email)\n    .keyboardType(.emailAddress)\n\n// 数字入力用\nTextField(\"年齢\", text: $age)\n    .keyboardType(.numberPad)\n\n// パスワード入力用\nSecureField(\"パスワード\", text: $password)\n```\n\n## 入力時のイベント処理\n\n```swift\nTextField(\"入力してください\", text: $text)\n    .onSubmit {\n        // EnterキーやReturnキーが押された時の処理\n        print(\"送信されました: \\(text)\")\n    }\n    .submitLabel(.search) // 送信ボタンのラベル\n```\n\n## 入力制限とバリデーション\n\nSwiftUIでは直接的な入力制限機能はありませんが、@State変数の変更を監視して制限できます：\n\n```swift\n@State private var phoneNumber = \"\"\n\nvar body: some View {\n    TextField(\"電話番号\", text: $phoneNumber)\n        .keyboardType(.phonePad)\n        .onChange(of: phoneNumber) { oldValue, newValue in\n            // 数字とハイフンのみ許可\n            let filtered = newValue.filter { \"0123456789-\".contains($0) }\n            if filtered != newValue {\n                phoneNumber = filtered\n            }\n        }\n}\n```\n\n## TextField vs SecureField\n\n- **TextField**: 通常のテキスト入力（パスワード以外）\n- **SecureField**: パスワード入力（入力内容が隠される）\n\n```swift\n// 通常のテキスト入力\nTextField(\"ユーザー名\", text: $username)\n\n// パスワード入力（内容が隠される）\nSecureField(\"パスワード\", text: $password)\n```\n\n## 注意点\n\n1. **@State変数の初期化**: 必ず初期値を設定してください\n2. **$記号**: バインディングには必ず$記号が必要です\n3. **private**: @State変数はprivateで宣言するのが一般的です\n4. **入力制限**: 必要に応じてonChangeを使って入力値を制限できます\n5. **キーボードタイプ**: 適切なkeyboardTypeを設定すると使いやすくなります\n\nTextFieldはユーザー入力の基本となるビューで、フォームや検索機能など様々な場面で使用されます。"
                },
                {
                    "title": "Toggle - スイッチ",
                    "intro": "Toggleでオン/オフのスイッチを作成できます。$記号で@State変数とバインディングし、状態に応じてUIを変更できます。",
                    "code": "import SwiftUI\n\n// メインのビュー構造体\nstruct ContentView: View {\n    // スイッチのオン/オフ状態を保存する変数\n    // Bool型でtrue（オン）またはfalse（オフ）を保存\n    @State private var isOn = false\n    \n    // 画面に表示する内容を定義\n    var body: some View {\n        // 縦方向にビューを並べるコンテナ\n        VStack(spacing: 20) {\n            // オン/オフを切り替えるスイッチ\n            // $isOnで状態変数とつなげる（バインディング）\n            Toggle(\"通知をオンにする\", isOn: $isOn)\n                .padding(.horizontal) // 左右に余白を追加\n            \n            // 三項演算子でスイッチの状態に応じてテキストを変更\n            // isOnがtrueなら「通知オン」、falseなら「通知オフ」\n            Text(isOn ? \"通知オン\" : \"通知オフ\")\n                .font(.title) // 大きなフォントサイズ\n                .foregroundColor(isOn ? .green : .red) // 状態に応じて色変更\n                .padding() // 内側に余白\n                .background(\n                    // 背景色も状態に応じて変更\n                    RoundedRectangle(cornerRadius: 10)\n                        .fill(isOn ? Color.green.opacity(0.2) : Color.red.opacity(0.2))\n                )\n        }\n        .padding() // 全体に余白を追加\n    }\n}\n\n// プレビューでアプリの見た目を確認\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/6_2.png",
                    "description": "ToggleはSwiftUIでオン/オフのスイッチを作成するためのビューです。ユーザーが設定を切り替えられるようにします。\n\n## Toggleの基本構文\n\n```swift\nToggle(\"ラベルテキスト\", isOn: $stateVariable)\n```\n\n- **第1引数**: スイッチの横に表示されるラベル（説明文）\n- **isOnパラメータ**: @State変数とのバインディング（$記号必須）\n\n## @Stateとのバインディング\n\n```swift\n@State private var isOn = false\n\nToggle(\"通知をオンにする\", isOn: $isOn)\n```\n\nToggleはBool型の@State変数とバインディングします。スイッチがオンになるとisOnがtrueに、オフになるとfalseになります。\n\n## 三項演算子による条件分岐\n\nToggleの状態に応じてUIを動的に変更するには、三項演算子を使います：\n\n```swift\nText(isOn ? \"通知オン\" : \"通知オフ\")\n    .foregroundColor(isOn ? .green : .red)\n```\n\n- `isOn ? A : B`: isOnがtrueならA、falseならB\n- これにより、スイッチの状態に応じてテキストや色を即座に変更できます\n\n## 条件分岐による動的UI\n\nToggleの状態に応じて、ビュー全体の表示・非表示を切り替えることもできます：\n\n```swift\nif isOn {\n    Text(\"通知が有効になっています\")\n        .foregroundColor(.green)\n}\n```\n\n## スタイルのカスタマイズ\n\nToggleは自動的にプラットフォームに適した外観になりますが、以下のようにカスタマイズできます：\n\n```swift\nToggle(\"設定\", isOn: $isEnabled)\n    .toggleStyle(SwitchToggleStyle()) // スイッチスタイル（デフォルト）\n    .tint(.blue) // スイッチの色を変更\n```\n\n## 注意点\n\n1. **Bool型**: Toggleは必ずBool型の@State変数とバインディングします\n2. **$記号**: バインディングには必ず$記号が必要です\n3. **初期値**: false（オフ）またはtrue（オン）から始めます\n4. **条件分岐**: 三項演算子を使ってUIを動的に変更できます\n5. **ネスト**: 親Toggleの状態に応じて子Toggleを表示/非表示にできます\n\nToggleは設定画面やオプション選択で欠かせないUIコンポーネントです。"
                },
                {
                    "title": "Slider - スライダー",
                    "intro": "Sliderで数値をスライドして入力できます。valueパラメータに$記号でバインドし、inパラメータで範囲、stepでステップを指定できます。",
                    "code": "import SwiftUI\n\n// メインのビュー構造体\nstruct ContentView: View {\n    // 音量の値を保存する変数（0.0から1.0の範囲）\n    // Float型で小数点以下の値を保存\n    @State private var volume = 0.5\n    \n    // 画面に表示する内容を定義\n    var body: some View {\n        // 縦方向にビューを並べるコンテナ\n        VStack(spacing: 30) {\n            // 現在の音量を表示（パーセントに変換）\n            // Int(volume * 100)で小数から整数に変換\n            Text(\"音量: \\(Int(volume * 100))%\")\n                .font(.title) // 大きなフォントサイズ\n            \n            // 音量を調整するスライダー\n            // 0...1の範囲で0.1刻み、$volumeでバインディング\n            Slider(value: $volume, in: 0...1, step: 0.1)\n                .padding(.horizontal) // 左右に余白\n                .accentColor(.blue) // 青色のスライダー\n            \n            // 横方向にアイコンを並べるコンテナ\n            HStack {\n                // 左側のスピーカーアイコン\n                // volume < 0.3（音量が30%未満）の場合のみ青色表示\n                Image(systemName: \"speaker.wave.1\")\n                    .foregroundColor(volume < 0.3 ? .gray : .blue)\n                \n                Spacer() // 間を広げるためのスペース\n                \n                // 右側のスピーカーアイコン\n                // volume > 0.7（音量が70%超）の場合のみ青色表示\n                Image(systemName: \"speaker.wave.3\")\n                    .foregroundColor(volume > 0.7 ? .blue : .gray)\n            }\n            .padding(.horizontal) // 左右に余白\n            .font(.title) // アイコンのサイズ\n        }\n        .padding() // 全体に余白を追加\n    }\n}\n\n// プレビューでアプリの見た目を確認\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/6_3.png",
                    "description": "SliderはSwiftUIで数値をスライドして入力するためのビューです。ユーザーが直感的に数値を調整できます。\n\n## Sliderの基本構文\n\n```swift\nSlider(value: $stateVariable, in: 範囲, step: ステップ)\n```\n\n- **valueパラメータ**: @State変数とのバインディング（$記号必須）\n- **inパラメータ**: スライダーの値の範囲（例: 0...1, 0...100）\n- **stepパラメータ**: スライダーの刻み幅（例: 0.1, 1.0）\n\n## @Stateとのバインディング\n\n```swift\n@State private var volume = 0.5\n\nSlider(value: $volume, in: 0...1, step: 0.1)\n```\n\nSliderはFloatやDouble型の@State変数とバインディングします。スライダーを動かすと値がリアルタイムで更新されます。\n\n## 範囲とステップの指定\n\n```swift\n// 0.0から1.0まで、0.1刻み\nSlider(value: $value, in: 0...1, step: 0.1)\n\n// 0から100まで、5刻み\nSlider(value: $brightness, in: 0...100, step: 5)\n\n// -50から50まで、1刻み\nSlider(value: $temperature, in: -50...50, step: 1)\n```\n\n## 数値の変換と表示\n\nSliderの値はFloat/Double型ですが、表示する際はIntに変換したり、計算したりします：\n\n```swift\n@State private var volume = 0.5\n\nText(\"音量: \\(Int(volume * 100))%\") // 0.5 → 50%\nText(\"温度: \\(temperature)°C\")     // そのまま表示\n```\n\n## 条件分岐による動的UI\n\nSliderの値に応じてUIを動的に変更できます：\n\n```swift\n// 値に応じて色が変わる\nImage(systemName: \"speaker.wave.1\")\n    .foregroundColor(volume < 0.3 ? .gray : .blue)\n\n// 値に応じてアイコンが変わる\nImage(systemName: volume > 0.7 ? \"speaker.wave.3\" : \"speaker.wave.1\")\n```\n\n## スタイルのカスタマイズ\n\n```swift\nSlider(value: $value, in: 0...1)\n    .accentColor(.blue)        // スライダーの色\n    .tint(.green)              // iOS 15以降で使用可能\n    .padding(.horizontal)      // 周囲の余白\n```\n\n## 最小値・最大値のラベル\n\n```swift\nSlider(value: $value, in: 0...100, step: 10) {\n    Text(\"音量\")  // スライダーのラベル\n} minimumValueLabel: {\n    Text(\"0\")    // 最小値のラベル\n} maximumValueLabel: {\n    Text(\"100\")  // 最大値のラベル\n}\n```\n\n## 注意点\n\n1. **数値型**: FloatまたはDouble型の@State変数を使用します\n2. **範囲指定**: inパラメータで必ず範囲を指定します\n3. **ステップ**: stepパラメータは省略可能（連続値になります）\n4. **$記号**: バインディングには必ず$記号が必要です\n5. **表示変換**: 必要に応じてInt()で整数に変換して表示します\n6. **動的UI**: 値に応じて色やアイコンを変更できます\n\nSliderは音量調整、明るさ設定、温度調整など、数値入力が必要な場面で活躍します。"
                }
            ]
        },
        {
            "id": "7",
            "title": "簡単なアプリ",
            "description": "学んだことを使って簡単なアプリを作成します。",
            "codeBlocks": [
                {
                    "title": "カウンターアプリ",
                    "intro": "カウンターアプリでは、SwiftUIの基本的な概念をすべて活用した実践的な例となっています。",
                    "code": "import SwiftUI\nstruct ContentView: View {\n    // カウントの値を保存する状態変数\n    @State private var count = 0\n    \n    // 画面に表示する内容を定義\n    var body: some View {\n        // 縦方向に要素を並べるコンテナ\n        VStack(spacing: 30) {\n            // 現在のカウント数を表示するテキスト\n            Text(\"\\(count)\")\n                .font(.system(size: 80, weight: .bold)) // 大きな太字フォント\n                .foregroundColor(countColor()) // カウントに応じた色\n            \n            // 横方向にボタンを並べるコンテナ\n            HStack(spacing: 40) {\n                // マイナスボタン\n                Button(action: {\n                    // カウントが0より大きい場合のみ減らす\n                    if count > 0 {\n                        count -= 1\n                    }\n                }) {\n                    // マイナスアイコンを表示\n                    Image(systemName: \"minus.circle.fill\")\n                        .font(.system(size: 60)) // アイコンのサイズ\n                        .foregroundColor(.red) // 赤色\n                }\n                \n                // プラスボタン\n                Button(action: {\n                    // カウントを1増やす\n                    count += 1\n                }) {\n                    // プラスアイコンを表示\n                    Image(systemName: \"plus.circle.fill\")\n                        .font(.system(size: 60)) // アイコンのサイズ\n                        .foregroundColor(.green) // 緑色\n                }\n            }\n            \n            // リセットボタン\n            Button(\"リセット\") {\n                // カウントを0に戻す\n                count = 0\n            }\n            .padding() // 内側に余白を追加\n            .background(Color.blue) // 青い背景\n            .foregroundColor(.white) // 白い文字\n            .cornerRadius(10) // 角を丸くする\n        }\n    }\n    \n    // カウントの値に応じて色を決める関数\n    private func countColor() -> Color {\n        if count > 0 {\n            return .green // 正の値は緑\n        } else if count < 0 {\n            return .red // 負の値は赤\n        } else {\n            return .gray // 0は灰色\n        }\n    }\n}\n\n// プレビューでアプリの見た目を確認\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/images/tutorial/7_1.png",
                    "description": "## カウンターアプリの概要\n\nこのカウンターアプリは、SwiftUIの基本的な概念をすべて活用した実践的な例となっています。カウントの増減とリセット機能を備えたシンプルなインターフェースを通じて、状態管理、レイアウト、ユーザー操作、動的UI変更などの重要な概念を学習できます。\n\n## @Stateによる状態管理\n\n```swift\n@State private var count = 0\n```\n\nまず、@Stateプロパティラッパーを使ってcountという状態変数を宣言しています。この変数はprivateで宣言されており、ビュー内部でのみ変更可能になっています。countの初期値は0です。\n\n## UIレイアウトの構成\n\n```swift\nVStack(spacing: 30) {\n    Text(\"\\(count)\")\n        .font(.system(size: 80, weight: .bold))\n        .foregroundColor(countColor())\n    \n    HStack(spacing: 40) {\n        // プラスとマイナスのボタン\n    }\n    \n    // リセットボタン\n}\n```\n\nUIのレイアウトにはVStack（垂直スタック）を使用し、spacing: 30で各要素間に30ポイントの間隔を設けています。一番上には現在のカウント値を表示するTextビューがあり、font(.system(size: 80, weight: .bold))で非常に大きな太字フォントを指定し、foregroundColor(countColor())で動的に色を変更しています。\n\n## ボタンの機能実装\n\n中央にはHStack（水平スタック）でプラスとマイナスのボタンを配置し、spacing: 40でボタン間に40ポイントの間隔を設けています。\n\n**マイナスボタン**\n```swift\nButton(action: {\n    if count > 0 {\n        count -= 1\n    }\n}) {\n    Image(systemName: \"minus.circle.fill\")\n        .font(.system(size: 60))\n        .foregroundColor(.red)\n}\n```\n\nマイナスボタンはif count > 0の条件付きでcountを減算し、0以下にはならないように制御しています。\n\n**プラスボタン**\n```swift\nButton(action: {\n    count += 1\n}) {\n    Image(systemName: \"plus.circle.fill\")\n        .font(.system(size: 60))\n        .foregroundColor(.green)\n}\n```\n\nプラスボタンは無条件でcountをインクリメントします。どちらのボタンもImage(systemName:)を使ってシステムアイコンを表示し、適切な色とサイズを設定しています。\n\n**リセットボタン**\n```swift\nButton(\"リセット\") {\n    count = 0\n}\n.padding()\n.background(Color.blue)\n.foregroundColor(.white)\n.cornerRadius(10)\n```\n\n一番下には「リセット」ボタンを配置し、countを0に戻す機能を持っています。このボタンはpadding()、background(Color.blue)、foregroundColor(.white)、cornerRadius(10)で青い背景の角丸ボタンとしてスタイル化されています。\n\n## 動的色の変更機能\n\n```swift\nprivate func countColor() -> Color {\n    if count > 0 {\n        return .green\n    } else if count < 0 {\n        return .red\n    } else {\n        return .gray\n    }\n}\n```\n\n最後に、countColor()というプライベート関数を定義しています。この関数はcountの値に応じてColorを返却します。countが正の値なら緑、負の値なら赤、0なら灰色を返します。これにより、カウントの状態が視覚的にわかりやすくなっています。"
                }
            ]
        }
    ]
}