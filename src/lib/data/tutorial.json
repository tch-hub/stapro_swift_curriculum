{
    "sections": [
        {
            "id": "0",
            "title": "デフォルトのコード解説",
            "description": "新しいSwiftUIプロジェクトで自動生成されるコードについて学びます。",
            "codeBlocks": [
                {
                    "title": "自動生成される基本構造",
                    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-0-1.png",
                    "scale": 1.0,
                    "description": "新しいSwiftUIプロジェクトを作ると、このコードが自動で作られます。これがSwiftUIアプリの基本の形です。\n\nまず、import SwiftUIでSwiftUIというツールを読み込みます。これで、TextやButtonなどの便利な機能を使えるようになります。\n\n次に、ContentViewという構造体を作ります。これはアプリの画面のメイン部分です。Viewというルールに従って作ります。\n\nbodyという部分は、画面に何を表示するかを書くところです。\n\nsome Viewは、戻り値の型を指定する特別な書き方です。これでSwiftUIがうまく動きます。\n\n#Previewは、コードを書くたびに画面をすぐに見られる機能です。これで、アプリの見た目をすぐに確認できます。"
                }
            ]
        },
        {
            "id": "1",
            "title": "テキスト表示",
            "description": "SwiftUIでテキストを表示する方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Textビューの基本",
                    "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\") // Hello, World!を表示するテキスト\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-1-1.png",
                    "scale": 1.5,
                    "description": "TextビューはSwiftUIで最も基本的なビューコンポーネントです。画面にテキストを表示するために使用します。\n\nまず、struct ContentView: View { ... } という構造体を定義しています。これはSwiftUIのビューを作成するための基本的な書き方です。ContentViewという名前の構造体がViewプロトコルに準拠することで、SwiftUIのビューとして認識されます。\n\n次に、var body: some View { ... } という計算プロパティを定義しています。bodyはSwiftUIのビューで必須のプロパティで、この中にUIのレイアウトやコンテンツを記述します。some Viewは戻り値の型を指定する特別な書き方で、SwiftUIがビューの型を柔軟に扱えるようにします。\n\nText(\"Hello, World!\") はTextビューを作成しています。Textビューは文字列を引数に取って、その文字列を画面に表示します。この例では\"Hello, World!\"という文字列が表示されます。\n最後に、#Preview { ContentView() } があります。これはXcodeのプレビューツールで、コードを書いたらすぐに画面の見た目を確認できる機能です。ContentView()を呼び出すことで、このビューのプレビューが生成されます。これにより、アプリを実行しなくてもUIの変更を確認できます。\n\nTextビューはSwiftUIの基礎となるビューで、他のビューと組み合わせて複雑なUIを作成する土台となります。シンプルですが、フォント、色、サイズなどの装飾を追加することで様々な表現が可能になります。"
                },
                {
                    "title": "テキストの装飾",
                    "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"SwiftUIの装飾\") // 基本のテキストを作成\n            .font(.largeTitle) // 大きなタイトル用のフォントサイズ\n            .foregroundColor(.blue) // 青色に設定\n            .fontWeight(.bold) // 太字に設定\n            .multilineTextAlignment(.center) // 複数行の場合中央揃え\n            .padding() // 周囲に余白を追加\n    }\n}\n\n#Preview {\n    ContentView() // プレビューを表示\n}",
                    "previewImage": "/previews/tutorial-1-2.png",
                    "scale": 1.0,
                    "description": "TextビューはSwiftUIで最も柔軟なビューの一つで、様々な装飾をチェーン（連鎖）して適用することができます。この例では、基本的なTextビューに複数の装飾を順番に適用しています。\n\nまず、Text(\"SwiftUIの装飾\") で基本のテキストを作成します。この時点では、まだ何の装飾も適用されていません。\n\n次に、.font(.largeTitle) を適用します。font()修飾子はテキストのフォントサイズとスタイルを指定します。SwiftUIには.largeTitle、.title、.headline、.body、.captionなどの標準サイズが用意されており、.largeTitleは最も大きなタイトル用です。\n\n.foregroundColor(.blue) はテキストの色を青色に設定します。foregroundColor()は文字色を指定する修飾子で、Color.blueのような標準色や、Color(red: 0.5, green: 0.5, blue: 1.0)のようなRGB値で指定できます。\n\n.fontWeight(.bold) はテキストの太さを指定します。SwiftUIには.ultraLight、.thin、.light、.regular、.medium、.semibold、.bold、.heavy、.blackなどの太さオプションがあります。\n\n.multilineTextAlignment(.center) は複数行のテキストがある場合の配置を指定します。この例では.centerで中央揃えですが、.leading（左揃え）、.trailing（右揃え）も指定できます。\n\n最後に、.padding() を適用します。これによりテキストの周囲に余白が追加され、テキストが画面の端にくっつかないようにします。\n\nこれらの修飾子は、ドット(.)でつなげて順番に適用することができます。SwiftUIではこのようなチェーン構文が一般的で、コードを読みやすく整理できます。\n\nこのコードに書かれていない他の装飾パターンとしては、以下のようなものがあります：\n\n- .background(Color.yellow) : テキストの背景色を設定\n- .underline() : テキストに下線を引く\n- .strikethrough() : テキストに取り消し線を引く\n- .italic() : テキストを斜体にする\n- .baselineOffset(5) : テキストのベースラインをずらす\n- .kerning(2) : 文字間のスペースを調整\n- .lineSpacing(5) : 行間のスペースを調整\n- .minimumScaleFactor(0.5) : テキストが収まらない場合の最小縮小率\n- .lineLimit(2) : 表示する最大行数を制限\n- .textCase(.uppercase) : テキストを大文字に変換\n\nこれらの装飾を組み合わせることで、プロフェッショナルで魅力的なテキスト表示を作成できます。装飾の順番によって結果が異なる場合があるので、注意が必要です。"
                },
                {
                    "title": "複数行のテキスト",
                    "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"これは長いテキストです。SwiftUIでは自動的に折り返されて複数行で表示されます。\\n\\n改行を\\n明示的に\\n入れることも\\nできます\")\n            .multilineTextAlignment(.leading)\n            .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-1-3.png",
                    "scale": 0.9,
                    "description": "Textビューは長いテキストを扱う場合、自動的に折り返して複数行で表示します。また、\\nを使って明示的に改行を入れることもできます。\n\nまず、Text()の中に長い文字列を渡しています。この文字列には通常の文章と\\n（改行コード）が含まれています。SwiftUIは画面の幅に合わせて自動的にテキストを折り返しますが、\\nがある場所では必ず改行されます。\n\n.multilineTextAlignment(.leading)は、複数行になったテキストの配置を指定します。leadingは左揃えを意味し、他にも.center（中央揃え）や.trailing（右揃え）を指定できます。\n\n.padding()はテキストの周囲に余白を追加します。これにより、テキストが画面の端にくっつかないようにして読みやすくなります。\n\nこのように、Textビューは単純な文字列表示だけでなく、長い文章や改行を含む複雑なテキスト表示にも対応しています。ブログ記事や説明文を表示する際に便利です。"
                }
            ]
        },
        {
            "id": "2",
            "title": "ボタン操作",
            "description": "SwiftUIでボタンを作成し、操作を扱う方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Buttonの基本",
                    "code": "struct ContentView: View {\n    var body: some View {\n        Button(\"押してみよう\") {\n            print(\"ボタンが押されました！\")\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-2-1.png",
                    "description": "ButtonはSwiftUIで最も基本的なインタラクティブなビューです。最もシンプルな形では、Button(\"ラベル\") { action } という構文で作成できます。\n\n最初の引数にはボタンに表示する文字列（ラベル）を渡します。この例では\"押してみよう\"という文字列がボタンのラベルになります。\n\n2番目の引数にはactionクロージャーを渡します。これはボタンがタップされたときに実行されるコードです。クロージャーは { } で囲まれた無名関数のようなもので、この例では print(\"ボタンが押されました！\") が実行されます。\n\nprint()関数はコンソールにメッセージを出力するデバッグ用の関数です。実際のアプリでは、ここに何らかの処理（データの保存、画面遷移、状態の変更など）を書くことになります。\n\nボタンをタップすると、action内のコードが一度だけ実行されます。ボタンは自動的にタップ可能な外観を持ち、ユーザーが押したことを視覚的にフィードバックします。"
                },
                {
                    "title": "ボタンのスタイル",
                    "code": "struct ContentView: View {\n    var body: some View {\n        Button(action: {\n            print(\"スタイル付き\")\n        }) {\n            Text(\"スタイル付きボタン\")\n                .padding() // 内側に余白を追加\n                .background(Color.green) // 背景色を緑に設定\n                .foregroundColor(.white) // 文字色を白に設定\n                .cornerRadius(15) // 角を丸くする\n                .shadow(radius: 5) // 影を付けて立体感を出す\n        }\n    }\n}",
                    "previewImage": "/previews/tutorial-2-2.png",
                    "description": "Buttonには様々なスタイルがあります。Textビューを使って装飾することで、ボタンの見た目をカスタマイズできます。\n\n- padding() : ボタンの内側に余白を追加し、テキストとボタンの境界の間にスペースを作ります。これによりボタンが押しやすくなります。\n\n- background(Color.green) : ボタンの背景色を緑色に設定します。Color.greenはSwiftUIで用意されている標準色です。\n\n- foregroundColor(.white) : テキストの色を白色に設定します。これにより緑色の背景に白い文字が映えます。\n\n- cornerRadius(15) : ボタンの角を15ポイントの半径で丸くします。数値が大きいほど角が丸くなります。\n\n- shadow(radius: 5) : ボタンに5ポイントの半径の影を付けて、立体感を出します。影の半径が大きいほど影が柔らかくなります。\n\nこれらの修飾子を組み合わせることで、プロフェッショナルな見た目のボタンを作成できます。"
                }
            ]
        },
        {
            "id": "3",
            "title": "レイアウト",
            "description": "ビューをどのように配置するかを学びます。",
            "codeBlocks": [
                {
                    "title": "VStack - 縦方向のレイアウト",
                    "code": "struct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"上\")\n                .font(.title)\n                .foregroundColor(.red)\n            \n            Text(\"中央\")\n                .font(.title)\n                .foregroundColor(.green)\n            \n            Text(\"下\")\n                .font(.title)\n                .foregroundColor(.blue)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-3-1.png",
                    "description": "VStackはSwiftUIでビューを縦方向（垂直方向）に並べて配置するためのコンテナです。複数のビューを上から下へ順番に積み重ねるレイアウトを作成できます。\n\nVStackの基本的な使い方は、VStack { } のように波括弧の中に並べたいビューを記述します。この例では、赤い「上」、緑の「中央」、青い「下」という3つのTextビューを縦に並べています。\n\nspacingパラメータは、ビュー同士の間隔を指定します。この例ではspacing: 20と指定しているので、各Textビューの間に20ポイントのスペースが挿入されます。spacingを指定しない場合は、デフォルトの間隔が適用されます。\n\nビューはVStack内に記述した順番で上から下へ配置されます。最初のビューが一番上になり、最後のビューが一番下になります。\n\nVStackは画面のレイアウトを整理するのに非常に便利です。例えば、タイトル、コンテンツ、ボタンなどを縦に並べて配置するようなUIを作成する際に使用します。padding()をVStackに適用することで、全体に余白を追加できます。"
                },
                {
                    "title": "HStack - 横方向のレイアウト",
                    "code": "struct ContentView: View {\n    var body: some View {\n        HStack(spacing: 15) {\n            Text(\"左\")\n                .font(.title)\n                .foregroundColor(.red)\n            \n            Text(\"中央\")\n                .font(.title)\n                .foregroundColor(.green)\n            \n            Text(\"右\")\n                .font(.title)\n                .foregroundColor(.blue)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-3-2.png",
                    "description": "HStackはSwiftUIでビューを横方向（水平方向）に並べて配置するためのコンテナです。複数のビューを左から右へ順番に並べて配置するレイアウトを作成できます。\n\nHStackの基本的な使い方は、HStack { } のように波括弧の中に並べたいビューを記述します。この例では、赤い「左」、緑の「中央」、青い「右」という3つのTextビューを横に並べています。\n\nspacingパラメータは、ビュー同士の間隔を指定します。この例ではspacing: 15と指定しているので、各Textビューの間に15ポイントのスペースが挿入されます。spacingを指定しない場合は、デフォルトの間隔が適用されます。\n\nビューはHStack内に記述した順番で左から右へ配置されます。最初のビューが一番左になり、最後のビューが一番右になります。\n\nHStackは画面のレイアウトを整理するのに非常に便利です。例えば、アイコンとテキストを横に並べたり、複数のボタンを横に配置したりするようなUIを作成する際に使用します。padding()をHStackに適用することで、全体に余白を追加できます。"
                },
                {
                    "title": "ZStack - 重ね合わせレイアウト",
                    "code": "struct ContentView: View {\n    var body: some View {\n        ZStack {\n            Color.blue.opacity(0.3)\n                .frame(width: 200, height: 200)\n            \n            Color.red.opacity(0.5)\n                .frame(width: 150, height: 150)\n            \n            Text(\"重ねる\")\n                .foregroundColor(.white)\n                .font(.largeTitle)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-3-3.png",
                    "description": "ZStackはSwiftUIでビューを奥行き方向（Z軸）に重ねて配置するためのコンテナです。複数のビューを同じ位置に重ねて配置するレイアウトを作成できます。\n\nZStackの基本的な使い方は、ZStack { } のように波括弧の中に重ねたいビューを記述します。この例では、青い背景、赤い背景、白いテキストの順に重ねています。\n\nビューはZStack内に記述した順番で奥から手前に重ねられます。最初のビューが一番奥になり、最後のビューが一番手前に表示されます。この例では、青いColorが一番奥、赤いColorが中央、白いTextが一番手前になります。\n\nopacity()はビューの透明度を指定します。0.0が完全に透明、1.0が完全に不透明です。この例では青を0.3（30%透明）、赤を0.5（50%透明）に設定しています。\n\nframe()はビューのサイズを指定します。widthとheightで幅と高さをポイント単位で設定できます。\n\nZStackは背景の上に他の要素を重ねるのに適しています。例えば、背景画像の上にテキストを配置したり、バッジのような重ね合わせUIを作成したりする際に使用します。奥行きのあるレイアウトを作成することで、よりリッチな視覚効果を実現できます。"
                },
                {
                    "title": "Spacing - 要素間の間隔",
                    "code": "struct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"間隔なし\")\n                .font(.headline)\n            \n            VStack(spacing: 0) {\n                Text(\"間隔0\")\n                Text(\"ぎゅっと\")\n                Text(\"くっつく\")\n            }\n            .background(Color.yellow.opacity(0.3))\n            \n            VStack(spacing: 10) {\n                Text(\"間隔10\")\n                Text(\"少し\")\n                Text(\"離れる\")\n            }\n            .background(Color.green.opacity(0.3))\n            \n            VStack(spacing: 30) {\n                Text(\"間隔30\")\n                Text(\"かなり\")\n                Text(\"離れる\")\n            }\n            .background(Color.blue.opacity(0.3))\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-3-4.png",
                    "description": "spacingパラメータはVStackやHStack内でビュー同士の間隔を指定するための重要な設定です。適切な間隔を設定することで、読みやすく使いやすいレイアウトを作成できます。\n\nspacingパラメータはVStack(spacing: 値) または HStack(spacing: 値) のように指定します。値はポイント単位で、0以上の数値を設定できます。\n\nこの例では、異なるspacing値を持つ3つのVStackを比較しています：\n\n- spacing: 0 : ビュー同士が完全に密着します。ぎゅっとくっついたレイアウトになります。\n\n- spacing: 10 : ビュー同士が少し離れます。適度な間隔で読みやすくなります。\n\n- spacing: 30 : ビュー同士がかなり離れます。ゆったりとしたレイアウトになります。\n\nbackground()は各VStackに半透明の背景色を付けて、間隔の違いを視覚的にわかりやすくしています。opacity(0.3)で30%の透明度を設定しています。\n\nspacingの値はアプリのデザインやコンテンツの種類によって調整します。ボタン同士の場合は少し間隔を空け、関連するテキスト同士の場合は密着させるなど、状況に応じて使い分けます。適切なspacingはUIの使いやすさと美しさを大きく向上させます。"
                }
            ]
        },
        {
            "id": "4",
            "title": "状態管理",
            "description": "ビューの状態を管理してインタラクティブなUIを作成します。",
            "codeBlocks": [
                {
                    "title": "@Stateを使った状態管理",
                    "code": "struct ContentView: View {\n    @State private var count = 0 // カウントを保存する状態変数\n    \n    var body: some View {\n        VStack { // 縦方向にビューを並べる\n            Text(\"カウント: \\(count)\") // 現在のカウントを表示\n                .font(.largeTitle) // 大きなフォントサイズ\n            \n            HStack { // 横方向にボタンを並べる\n                Button(action: {\n                    count -= 1 // カウントを1減らす\n                }) {\n                    Text(\"-\") // マイナスボタンのラベル\n                        .font(.title) // タイトルサイズのフォント\n                        .frame(width: 50, height: 50) // ボタンのサイズ\n                        .background(Color.red) // 赤い背景\n                        .foregroundColor(.white) // 白い文字\n                        .cornerRadius(25) // 角を丸くする\n                }\n                \n                Button(action: {\n                    count += 1 // カウントを1増やす\n                }) {\n                    Text(\"+\") // プラスボタンのラベル\n                        .font(.title) // タイトルサイズのフォント\n                        .frame(width: 50, height: 50) // ボタンのサイズ\n                        .background(Color.green) // 緑の背景\n                        .foregroundColor(.white) // 白い文字\n                        .cornerRadius(25) // 角を丸くする\n                }\n            }\n        }\n    }\n}\n\n#Preview {\n    ContentView() // プレビューを表示\n}",
                    "previewImage": "/previews/tutorial-4-1.png",
                    "description": "@StateはSwiftUIでビューの状態を管理するための特別なプロパティラッパーです。インタラクティブなUIを作成する際に欠かせない重要な概念です。\n\n通常の変数とは異なり、@Stateがついた変数の値が変更されると、その変数を使っているビューが自動的に再描画されます。これにより、ユーザーの操作に応じてUIがリアルタイムに更新されます。\n\n@State変数は必ずprivate varとして宣言します。これにより、変数がそのビュー内でのみ変更可能になり、外部からの意図しない変更を防ぎます。\n\nこの例では、countという@State変数を使ってカウンターの値を管理しています。+ボタンをタップするとcount += 1、-ボタンをタップするとcount -= 1が実行され、countの値が変わるたびにText(\"カウント: \\(count)\")が自動的に更新されて新しい値が表示されます。\n\n@State変数を使う際は、変数名の前に$記号を付けてバインディングします。例えば、Buttonのaction内でcountを変更する場合は直接countを使いますが、TextFieldなどのコントロールにバインドする場合は$countとします。\n\n@StateはSwiftUIのリアクティブプログラミングの基礎となるもので、これを使うことで複雑な状態管理をシンプルに実装できます。カウンターアプリのようなシンプルなものから、複雑なフォームまで、様々なインタラクティブなUIの基礎となります。"
                }
            ]
        },
        {
            "id": "5",
            "title": "図形",
            "description": "SwiftUIで図形を描画する方法を学びます。",
            "codeBlocks": [
                {
                    "title": "Circle - 円",
                    "code": "struct ContentView: View {\n    var body: some View {\n        VStack(spacing: 30) {\n            // 青い塗りつぶしの円\n            Circle()\n                .fill(Color.blue)\n                .frame(width: 100, height: 100)\n            \n            // 赤い枠線の円\n            Circle()\n                .stroke(Color.red, lineWidth: 5)\n                .frame(width: 80, height: 80)\n            \n            // 緑の塗りつぶしに白い枠線の円\n            Circle()\n                .fill(Color.green)\n                .overlay(\n                    Circle()\n                        .stroke(Color.white, lineWidth: 4)\n                )\n                .frame(width: 120, height: 120)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-5-1.png",
                    "description": "Circle()で円を描画できます。fill()で塗りつぶし、stroke()で枠線を指定できます。overlay()を使って枠線付きの円を作成することも可能です。"
                },
                {
                    "title": "Rectangle - 四角形",
                    "code": "struct ContentView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            // 角丸なしの四角形\n            Rectangle()\n                .fill(Color.orange)\n                .frame(width: 150, height: 80)\n            \n            // 少し角丸の四角形\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 150, height: 80)\n                .cornerRadius(10)\n            \n            // かなり角丸の四角形\n            Rectangle()\n                .fill(Color.green)\n                .frame(width: 150, height: 80)\n                .cornerRadius(25)\n            \n            // RoundedRectangleで角丸四角形\n            RoundedRectangle(cornerRadius: 20)\n                .fill(Color.pink)\n                .frame(width: 150, height: 80)\n            \n            // Capsule（完全な角丸）\n            RoundedRectangle(cornerRadius: 40)\n                .fill(Color.purple)\n                .frame(width: 150, height: 80)\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-5-2.png",
                    "description": "Rectangle()で四角形を描画できます。cornerRadius()で角の丸みを調整できます。RoundedRectangle()で最初から角丸の四角形を作成できます。Capsuleのような完全な角丸を作ることも可能です。"
                }
            ]
        },
        {
            "id": "6",
            "title": "入力",
            "description": "ユーザーからの入力を扱う方法を学びます。",
            "codeBlocks": [
                {
                    "title": "TextField - テキスト入力",
                    "code": "struct ContentView: View {\n    @State private var name = \"\"\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            // 名前を入力するテキストフィールド\n            TextField(\"名前を入力してください\", text: $name)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding(.horizontal)\n            \n            // 名前が入力されている場合のみ挨拶を表示\n            if !name.isEmpty {\n                Text(\"こんにちは、\\(name)さん！\")\n                    .font(.title)\n                    .foregroundColor(.blue)\n            }\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-6-1.png",
                    "description": "TextFieldでテキスト入力を扱えます。$記号を使って@State変数とバインディングします。textFieldStyle()で外観をカスタマイズできます。"
                },
                {
                    "title": "Toggle - スイッチ",
                    "code": "struct ContentView: View {\n    @State private var isOn = false\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            Toggle(\"通知をオンにする\", isOn: $isOn)\n                .padding(.horizontal)\n            \n            Text(isOn ? \"通知オン\" : \"通知オフ\")\n                .font(.title)\n                .foregroundColor(isOn ? .green : .red)\n                .padding()\n                .background(\n                    RoundedRectangle(cornerRadius: 10)\n                        .fill(isOn ? Color.green.opacity(0.2) : Color.red.opacity(0.2))\n                )\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-6-2.png",
                    "description": "Toggleでオン/オフのスイッチを作成できます。$記号で@State変数とバインディングし、状態に応じてUIを変更できます。"
                },
                {
                    "title": "Slider - スライダー",
                    "code": "struct ContentView: View {\n    @State private var volume = 0.5\n    \n    var body: some View {\n        VStack(spacing: 30) {\n            Text(\"音量: \\(Int(volume * 100))%\")\n                .font(.title)\n            \n            Slider(value: $volume, in: 0...1, step: 0.1)\n                .padding(.horizontal)\n                .accentColor(.blue)\n            \n            HStack {\n                Image(systemName: \"speaker.wave.1\")\n                    .foregroundColor(volume < 0.3 ? .gray : .blue)\n                \n                Spacer()\n                \n                Image(systemName: \"speaker.wave.3\")\n                    .foregroundColor(volume > 0.7 ? .blue : .gray)\n            }\n            .padding(.horizontal)\n            .font(.title)\n        }\n        .padding()\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-6-3.png",
                    "description": "Sliderで数値をスライドして入力できます。valueパラメータに$記号でバインドし、inパラメータで範囲、stepでステップを指定できます。accentColor()でスライダーの色を変更できます。"
                }
            ]
        },
        {
            "id": "7",
            "title": "簡単なアプリ",
            "description": "学んだことを使って簡単なアプリを作成します。",
            "codeBlocks": [
                {
                    "title": "カウンターアプリ",
                    "code": "struct ContentView: View {\n    @State private var count = 0\n    \n    var body: some View {\n        VStack(spacing: 30) {\n            Text(\"\\(count)\")\n                .font(.system(size: 80, weight: .bold))\n                .foregroundColor(countColor())\n            \n            HStack(spacing: 40) {\n                Button(action: {\n                    if count > 0 {\n                        count -= 1\n                    }\n                }) {\n                    Image(systemName: \"minus.circle.fill\")\n                        .font(.system(size: 60))\n                        .foregroundColor(.red)\n                }\n                \n                Button(action: {\n                    count += 1\n                }) {\n                    Image(systemName: \"plus.circle.fill\")\n                        .font(.system(size: 60))\n                        .foregroundColor(.green)\n                }\n            }\n            \n            Button(\"リセット\") {\n                count = 0\n            }\n            .padding()\n            .background(Color.blue)\n            .foregroundColor(.white)\n            .cornerRadius(10)\n        }\n    }\n    \n    private func countColor() -> Color {\n        if count > 0 {\n            return .green\n        } else if count < 0 {\n            return .red\n        } else {\n            return .gray\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}",
                    "previewImage": "/previews/tutorial-7-1.png",
                    "description": "カウンターアプリでは@Stateで状態管理、VStackとHStackでレイアウト、Buttonで操作、条件に応じた色の変更を実装しています。簡単なアプリでも多くのSwiftUIの概念が使われています。"
                }
            ]
        }
    ]
}